apiVersion: v1
kind: Template
metadata:
  name: barnabas-connect-s2i
parameters:
- description: Specifies the number of Kafka Connect instances to be started by default.
  displayName: Number of Kafka connect instances
  name: INSTANCES
  required: true
  value: "1"
- description: A list of host:port pairs to use for establishing the initial connection to the Kafka cluster.
  displayName: Kafka bootstrap servers
  name: KAFKA_CONNECT_BOOTSTRAP_SERVERS
  required: true
  value: kafka:9092
- description: |
        A unique string that identifies the Connect cluster group this worker belongs to. 
        This must not conflict with any consumer group IDs.
  displayName: Group ID
  name: KAFKA_CONNECT_GROUP_ID
  required: true
  value: connect-cluster
- description: Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka.
  displayName: Key Converter
  name: KAFKA_CONNECT_KEY_CONVERTER
  required: true
  value: org.apache.kafka.connect.json.JsonConverter
- description: Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka.
  displayName: Value Converter
  name: KAFKA_CONNECT_VALUE_CONVERTER
  required: true
  value: org.apache.kafka.connect.json.JsonConverter
- description: Replication factor for config storage topic
  displayName: Config replication factor
  name: KAFKA_CONFIG_STORAGE_REPLICATION_FACTOR
  value: "3"
- description: Replication factor for offset storage topic
  displayName: Offset replication factor
  name: KAFKA_OFFSET_STORAGE_REPLICATION_FACTOR
  value: "3"
- description: Replication factor for status storage topic
  displayName: Status replication factor
  name: KAFKA_STATUS_STORAGE_REPLICATION_FACTOR
  value: "3"
- description: Name of the Build which will be created by this template
  displayName: Build name
  name: BUILD_NAME
  required: true
  value: "kafka-connect"
- description: Name of the new Kafka Connect Docker image which will be generated
  displayName: Target image name
  name: TARGET_IMAGE_NAME
  required: true
  value: "kafka-connect"
- description: Tag of the new Kafka Connect Docker image which will be generated
  displayName: Target image tag
  name: TARGET_IMAGE_TAG
  value: latest
- description: Image repository name of the S2I Docker image
  displayName: S2I image repository
  name: S2I_IMAGE_REPO_NAME
  value: enmasseproject 
- description: Name of the S2I Docker image
  displayName: S2I image name
  name: S2I_IMAGE_NAME
  value: kafka-connect-s2i
- description: Tag of the S2I Docker image
  displayName: S2I image tag
  name: S2I_IMAGE_TAG
  value: latest
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: ${BUILD_NAME}
    name: ${TARGET_IMAGE_NAME}
  spec:
    lookupPolicy:
      local: true
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: ${BUILD_NAME}
    name: ${S2I_IMAGE_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: ${S2I_IMAGE_REPO_NAME}/${S2I_IMAGE_NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${BUILD_NAME}
    name: ${BUILD_NAME}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${TARGET_IMAGE_NAME}:${TARGET_IMAGE_TAG}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: ${S2I_IMAGE_NAME}:${S2I_IMAGE_TAG}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: kafka-connect
  spec:
    ports:
      - port: 8083
        name: rest-api
        targetPort : 8083
        protocol: TCP
    selector:
      name: kafka-connect
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: kafka-connect
  spec:
    replicas: ${INSTANCES}
    template:
      metadata:
        labels:
          name: kafka-connect
      spec:
        containers:
          - name: kafka-connect
            image: ${TARGET_IMAGE_NAME}:${TARGET_IMAGE_TAG}
            ports:
              - name: rest-api
                containerPort: 8083
                protocol: TCP
            env:
              - name: KAFKA_CONNECT_BOOTSTRAP_SERVERS
                value: "${KAFKA_CONNECT_BOOTSTRAP_SERVERS}"
              - name: KAFKA_CONNECT_GROUP_ID
                value: "${KAFKA_CONNECT_GROUP_ID}"
              - name: KAFKA_CONNECT_KEY_CONVERTER
                value: "${KAFKA_CONNECT_KEY_CONVERTER}"
              - name: KAFKA_CONNECT_VALUE_CONVERTER
                value: "${KAFKA_CONNECT_VALUE_CONVERTER}"
              - name: KAFKA_CONFIG_STORAGE_REPLICATION_FACTOR
                value: "${KAFKA_CONFIG_STORAGE_REPLICATION_FACTOR}"
              - name: KAFKA_OFFSET_STORAGE_REPLICATION_FACTOR
                value: "${KAFKA_OFFSET_STORAGE_REPLICATION_FACTOR}"
              - name: KAFKA_STATUS_STORAGE_REPLICATION_FACTOR
                value: "${KAFKA_STATUS_STORAGE_REPLICATION_FACTOR}"
            livenessProbe:
              httpGet:
                path: /
                port: rest-api
              initialDelaySeconds: 60
    triggers:
      - type: ConfigChange
      - type: ImageChange"
        imageChangeParams:
          automatic: true
          containerNames:
            - kafka-connect
          from:
            kind: ImageStreamTag
            name: ${TARGET_IMAGE_NAME}:${TARGET_IMAGE_TAG}