<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>strimzi</artifactId>
        <groupId>io.strimzi</groupId>
        <version>0.25.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>config-model-generator</artifactId>

    <properties>
        <kafka-metadata-version>${kafka.version}</kafka-metadata-version>
        <config-model-file>../cluster-operator/src/main/resources/kafka-${kafka-metadata-version}-config-model.json</config-model-file>
    </properties>

    <dependencyManagement>
        <!-- Manage versions to allow for override via the CLI with system property. -->
        <dependencies>
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka_2.13</artifactId>
                <version>${kafka-metadata-version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka-clients</artifactId>
                <version>${kafka-metadata-version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>config-model</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.13</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <configuration>
                    <mainClass>io.strimzi.build.kafka.metadata.KafkaConfigModelGenerator</mainClass>
                    <arguments>
                        <argument>${config-model-file}</argument>
                    </arguments>
                </configuration>
                <executions>
                    <execution>
                        <!-- This execution is included here to generate the required files as part of the regular
                             Maven build so that a successful `mvn clean install` isn't contingent on running make first.
                             This helps with two scenarios:
                                1) Tests failing in cluster-operator because no Kafka configuration existed
                                2) Tests failing in cluster-operator because config files for now unsupported Kafka versions still exist -->
                        <id>generate-config-models</id>

                        <!-- Need a phase after compile (so that the class exists), but before test -->
                        <phase>process-classes</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>

                        <!-- Use the shell script instead of executing directly, as we need to execute KafkaConfigModelGenerator
                             once for every supported version, and the existing shell scripts already handle determing what those versions are -->
                        <configuration>
                            <executable>${project.basedir}${file.separator}build-config-models.sh</executable>
                            <arguments>
                                <argument>build</argument>
                            </arguments>
                            <workingDirectory>${project.basedir}</workingDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
