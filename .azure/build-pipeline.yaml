# Triggers
trigger:
  branches:
    include:
      - 'master'
      - 'release-*'
pr:
  autoCancel: true
  branches:
    include:
      - '*'

jobs:
  - job: 'strimzi_build_and_test'
    displayName: 'Build & Test'
    # Strategy for the job
    strategy:
      matrix:
        'java-8':
          image: 'Ubuntu-18.04'
          jdk_version: '1.8'
          jdk_path: '/usr/lib/jvm/java-8-openjdk-amd64'
        'java-11':
          image: 'Ubuntu-18.04'
          jdk_version: '11'
          jdk_path: '/usr/lib/jvm/java-11-openjdk-amd64'
    # Set timeout for jobs
    timeoutInMinutes: 600
    # Base system
    pool:
      vmImage: $(image)
    # Environment variables
    variables:
      - template: "templates/default_variables.yaml"
    # Pipeline steps
    steps:
      - template: 'templates/setup_java.yaml'
        parameters:
          JDK_PATH: $(jdk_path)
          JDK_VERSION: $(jdk_version)

      - template: "templates/log_variables.yaml"

      - task: UseRubyVersion@0
        inputs:
          versionSpec: '>= 2.4'
          addToPath: true

      - bash: gem install asciidoctor
        displayName: 'Install asciidoctor'

      - bash: ".azure/scripts/setup_docker.sh"
        displayName: "Setup Docker environment"

      - bash: ".azure/scripts/setup_shellcheck.sh"
        displayName: "Setup Shellcheck"

      - bash: ".travis/install_yq.sh"
        displayName: "Install yq"

      - template: "templates/build_strimzi.yaml"

      - bash: ".travis/setup-kubernetes.sh"
        displayName: "Setup Minikube cluster"
        env:
          TEST_HELM2_VERSION: 'v2.16.3'
          TEST_HELM3_VERSION: 'v3.2.0'

      - bash: |
          make docker_build
          make docker_tag
        env:
          MVN_ARGS: '-B -DskipTests'
        displayName: "Build Strimzi images locally"

      - task: Maven@3
        inputs:
          mavenPomFile: 'systemtest/pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: 'default'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/failsafe-reports/TEST-*.xml'
          goals: 'verify'
          options: '-Dgroups=acceptance -DexcludedGroups=flaky,loadbalancer -Dmaven.javadoc.skip=true -B -V'
        env:
          OPERATOR_IMAGE_PULL_POLICY: "IfNotPresent"
        displayName: 'Run system tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '**/TEST-*.xml'
          searchFolder: "systemtest"
          testRunTitle: "System tests"
        condition: always()

      - bash: |
          rm -rf systemtest/target/logs/timeMeasuring
        displayName: 'Remove timeMeasuring dir from logs'
        condition: failed()

      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: 'systemtest/target/logs/'
          artifactName: systemtest-logs
          displayName: 'Publish logs from failed tests'
        condition: failed()

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: "Unit & Integration tests"
        condition: always()
